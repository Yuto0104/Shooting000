//**************************************************************************************************
//
// カメラ処理(camera.h)
// Auther：唐﨑結斗
// 概要 : カメラの設定処理
//
//**************************************************************************************************
#ifndef _CAMERA_H_			// このマクロ定義がされてなかったら
#define _CAMERA_H_			// 二重インクルード防止のマクロ定義

//***************************************************************************
// インクルード
//***************************************************************************
#include"main.h"

//*****************************************************************************
// 前方宣言
//*****************************************************************************
class CMove;

//=============================================================================
// カメラクラス
// Author : 唐﨑結斗
// 概要 : カメラ設定を行うクラス
//=============================================================================
class CCamera
{
private:
	//--------------------------------------------------------------------
	// 定数定義
	//--------------------------------------------------------------------
	static const float CAMERA_NEAR;			// ニアの最大値
	static const float CAMERA_FUR;			// ファーの最大値

public:
	//=============================================================================
	// 投影方法のタイプ列挙型
	// Author : 唐﨑結斗
	// 概要 : 投影方法の種別
	//=============================================================================
	enum VIEW_TYPE
	{
		TYPE_CLAIRVOYANCE = 0,		// 透視投影
		TYPE_PARALLEL,				// 平行投影
		MAX_VIEW_TYPE,				// タイプの最大数
	};

	//--------------------------------------------------------------------
	// コンストラクタとデストラクタ
	//--------------------------------------------------------------------
	CCamera();
	~CCamera();

	//--------------------------------------------------------------------
	// メンバ関数
	//--------------------------------------------------------------------
	HRESULT Init(void);											// 初期化
	void Uninit(void);											// 終了
	void Update(void);											// 更新
	void Set(void);												// 設定
	void SetViewType(VIEW_TYPE type) { m_viewType = type; }		// タイプの設定

private:
	//--------------------------------------------------------------------
	// メンバ関数
	//--------------------------------------------------------------------
	void Rotate(void);			// 回転
	void Move(void);			// 移動

	//--------------------------------------------------------------------
	// メンバ変数
	//--------------------------------------------------------------------
	CMove			*m_pRoll;			// 移動クラスのインスタンス(角度)
	D3DXVECTOR3		m_posV;				// 視点
	D3DXVECTOR3		m_posR;				// 注視点
	D3DXVECTOR3		m_vecU;				// 上方向ベクトル
	D3DXVECTOR3		m_rot;				// 向き
	D3DXVECTOR3		m_rotMove;			// 移動方向
	D3DXMATRIX		m_mtxProj;			// プロジェクションマトリックス
	D3DXMATRIX		m_mtxView;			// ビューマトリックス
	VIEW_TYPE		m_viewType;			// 投影の種別
	float			m_fDistance;		// 視点から注視点までの距離
	float			m_fRotMove;			// 移動方向
};

#endif
